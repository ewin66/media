using System;
using System.ComponentModel;

namespace FutureConcepts.Media
{
    /// <summary>
    /// Used to express a Microwave receiver frequency user-defined preset
    /// kdixon 02/09/2009
    /// </summary>
    [Serializable]
    [Obsolete("Please use MicrowaveTuningPreset")]
    public class MicrowaveFrequencyPreset : UserPresetItem
    {
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public MicrowaveFrequencyPreset() { }

        /// <summary>
        /// Creates a new instance, set to a specific frequency
        /// </summary>
        /// <param name="frequency">Microwave frequency, in MHz</param>
        public MicrowaveFrequencyPreset(int frequency)
        {
            this.Frequency = frequency;
            this.Name = this.ToString();
        }

        private int _freq;
        /// <summary>
        /// The frequency, in MHz
        /// </summary>
        public int Frequency
        {
            get
            {
                return _freq;
            }
            set
            {
                _freq = value;
            }
        }

        private bool _autoGenerated;
        /// <summary>
        /// If this field is true, then this preset can be wiped out during a scan for new presets.
        /// If the user edits the properties in this struct, then it should be set to false
        /// </summary>
        [DefaultValue(false)]
        public bool AutoGenerated
        {
            get
            {
                return _autoGenerated;
            }
            set
            {
                _autoGenerated = value;
            }
        }

        /// <summary>
        /// Generates a string representation of this preest.
        /// </summary>
        /// <returns>If name is not set, then returns "<see cref="P:Frequency"/> MHz"</returns>
        public override string ToString()
        {
            if (this.Name != null)
            {
                if (this.Name.Equals(this.Frequency + " MHz"))
                {
                    return this.Name;
                }
            }

            return this.Frequency + " MHz" + ((this.Name != null) ? (Environment.NewLine + this.Name) : "");
        }
    }
}
